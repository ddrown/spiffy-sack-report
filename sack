#!/usr/bin/perl

use strict;

########################################################################################
package Connection;

sub new {
  my $class = shift;
  my $self = {};
  bless($self,$class);
  return $self;
}

sub add_packet {
  my($self,%packet_facts) = @_;

  if($packet_facts{data}) {
    $self->add_data($packet_facts{data});
  }
  $self->{packets}++;
  $self->{ack} = $packet_facts{ack};
  $self->{fin} = $packet_facts{fin};
  if($packet_facts{sack}) {
    foreach my $lost (@{$packet_facts{lost}}) {
      if(not $self->{lost}{$lost->{min}}) { # TODO: deal with ranges
        $self->{packets_lost}++; # TODO: wrong name
        $self->{lost}{$lost->{min}};
      }
    }
  }  
}

sub speed_num {
  my($self,$now) = @_;

  my $xfer = $self->{data};
  my $seconds = $now - $self->{data_time} + 1;
  if(ref($self->{data_samples})) {
    foreach my $sample (@{$self->{data_samples}}) {
      if($now - $sample->{when} < 10) {
        $xfer += $sample->{xfer};
	$seconds = $now - $sample->{when} + 1;
      }
    }
  }

  $self->{speed} = $xfer * 8 / $seconds;
  return $self->{speed};
}

sub add_data {
  my($self,$amount) = @_;

  my $now = time();
  if($self->{data_time} != $now) {
    if(defined($self->{data_time})) { # store 10 seconds of historical data
      push(@{$self->{data_samples}}, {xfer => $self->{data}, when => $self->{data_time}});
      if(@{$self->{data_samples}} > 10) {
        shift(@{$self->{data_samples}});
      }
    }
    $self->{data} = 0;
    $self->{data_time} = $now;
  }
  $self->{data} += $amount;
}

sub speed_info {
  my($self,$now) = @_;

  my $speed = $self->speed_num($now);

  if($speed > 1000000) {
    return(sprintf("%0.1fMb/s", $speed / 1000000), $speed);
  } elsif($self->{speed} > 1000) {
    return(sprintf("%0.1fKb/s", $speed / 1000), $speed);
  }
  return(sprintf("%0.1fb/s", $speed), $speed);
}

sub include_in_list {
  my($self) = @_;

  return $self->{packets} > 10; # arbitrary
}

sub finished {
  my($self) = @_;

  return $self->{fin};
}

sub conn_info {
  my($self,$now) = @_;

  my $loss = 0;
  my $ack = $self->{packets};
  if($self->{packets_lost} > 0) {
    $loss = sprintf("%0.1f",$self->{packets_lost}/($ack+$self->{packets_lost})*100);
  }
  my $final = "";
  if($self->{fin}) {
    $final = " (final)";
  }
  my($speed_str,$speed) = $self->speed_info($now);
  return("pkt=".$self->{packets}." loss=".$loss."% speed=$speed_str$final", $speed);
}

########################################################################################
package ConnectionCollection;

sub new {
  my $class = shift;
  my $self = {};
  $self->{conns} = {};
  bless($self,$class);
  return $self;
}

sub connection {
  my($self,$source,$dest) = @_;
  if(defined $self->{conns}{$source}{$dest}) {
    return $self->{conns}{$source}{$dest};
  }
  $self->{conns}{$source}{$dest} = new Connection();
  return $self->{conns}{$source}{$dest};
}

sub show_state {
  my($self) = @_;

  print "\n";
  my $now = time();
  my(%printed,@connections);
  foreach my $source (keys %{$self->{conns}}) {
    foreach my $dest (keys %{$self->{conns}{$source}}) {
      if(not $printed{$source}{$dest} and $self->{conns}{$source}{$dest}->include_in_list()) {
        my($speed,$str) = (0,"");
        $printed{$source}{$dest} = 1;
        my($half_connection_str, $half_connection_speed) = $self->{conns}{$source}{$dest}->conn_info($now);
        $speed = $half_connection_speed;
        $str = "$source => $dest $half_connection_str";
	if(defined($self->{conns}{$dest}{$source}) and $self->{conns}{$dest}{$source}->include_in_list()) {
          ($half_connection_str, $half_connection_speed) = $self->{conns}{$dest}{$source}->conn_info($now);
          $str .= ", $half_connection_str";
          if($half_connection_speed > $speed) {
            $speed = $half_connection_speed;
          }
	  $printed{$dest}{$source} = 1;
	}
        push(@connections,{speed => $speed, str => $str});
      }
      if($self->{conns}{$source}{$dest}->finished()) {
        delete($self->{conns}{$source}{$dest});
      }
    }
  }

  @connections = sort { $a->{speed} <=> $b->{speed} } @connections;
  foreach my $connection (@connections) {
    print $connection->{str}."\n";
  }
}

########################################################################################
package TcpdumpText;

sub new {
  my $class = shift;
  my $self = {};
  $self->{leftovers} = "";
  bless($self,$class);
  return $self;
}

sub process {
  my($self,$lines,$conns) = @_;

  $lines = $self->{leftovers}.$lines;

  while($lines =~ s/([^\n]*)\n//s) {
    my $line = $1;
# options [nop,nop,sack 1 {605491:709171}]
    if($line =~ /^([0-9:.]+) (IP6|IP) ([0-9a-f:.]+) > ([0-9a-f:.]+): /) {
      my($time,$ip,$source,$dest) = ($1,$2,$3,$4);
      my(%packet_facts);
      if($line =~ /, seq (\d+):(\d+)/) {
        $packet_facts{data} = $2-$1;
      }
      if($line =~ /, ack (\d+)/) {
        $packet_facts{ack} = $1;
      }
      if($line =~ /Flags \[[^]]*F/) {
        $packet_facts{fin} = 1;
      }
      if($line =~ /sack (\d+) ([{}0-9:]+)/) {
	my($count,$rcvd) = ($1,$2);
	$packet_facts{sack} = $count;
        my(@lost);
	for(my $i = 0; $i < $count; $i++) {
	  if($rcvd =~ /^{(\d+):(\d+)}(.*)/) {
	    my($lost_min,$lost_max) = ($1,$2);
	    $rcvd = $2;
	    push(@lost,{min => $lost_min, max => $lost_max});
	  }
	}
	$packet_facts{lost} = \@lost;
      }
      $conns->connection($source,$dest)->add_packet(%packet_facts);
    } else {
      print "???? $line";
    }
  }

  $self->{leftovers} = $lines;
}

########################################################################################
package main;

use IO::Select;
use Time::HiRes qw(gettimeofday tv_interval);

$| = 1;

my($conns) = new ConnectionCollection();
my $tcpdumptext = new TcpdumpText();

my $s = IO::Select->new();
$s->add(\*STDIN);
my $next = [gettimeofday()];
$next->[0] += 1;
while(1) {
  my $now = [gettimeofday()];
  my $timeout = -1 * tv_interval($next,$now);
  my(@reads) = $s->can_read($timeout);
  if(@reads) {
    sysread(STDIN, my $line, 1024);
    $tcpdumptext->process($line,$conns);
  }
  my $now = [gettimeofday()];
  if(tv_interval($next,$now) >= 0) {
    $next = $now;
    $next->[0] += 1;
    $conns->show_state();
  }
}
